#pragma once
////////////////////////////////////////////////////////////////////////////////
#include <Engine/Base>
////////////////////////////////////////////////////////////////////////////////

// Project headers - Renderer
#include "Renderer/Graphics/Vulkan/Vulkan.hpp"

// C Standard Library
#include <cstdint>
// C++ Standard Library
#include <memory>

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////

NAMESPACE_BEGIN(Renderer::Graphics)

class PhysicalDevice;

NAMESPACE_END(Renderer::Graphics)

////////////////////////////////////////////////////////////////////////////////
// Class declarations
////////////////////////////////////////////////////////////////////////////////

NAMESPACE_BEGIN(Renderer::Graphics)

class LogicalDevice
{
public:
  LogicalDevice(
    PhysicalDevice const& physicalDevice,
    std::uint32_t const queueFamilyIndex);
  ~LogicalDevice();

private:
  VkDevice handle;
  VkQueue queue;
  PhysicalDevice const& physicalDevice;
};

////////////////////////////////////////////////////////////////////////////////
// Factory functions
////////////////////////////////////////////////////////////////////////////////

auto
CreateDevice(
  PhysicalDevice const& physicalDevice,
  std::uint32_t const queueFamilyIndex) -> std::unique_ptr<LogicalDevice>;

////////////////////////////////////////////////////////////////////////////////

NAMESPACE_END(Renderer::Graphics)
