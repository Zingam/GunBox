#pragma once
////////////////////////////////////////////////////////////////////////////////
#include <Engine/Base>
////////////////////////////////////////////////////////////////////////////////

// Third party libraries
#include <glad/vulkan.h>

// C++ Standard Library
#include <string>
#include <vector>

////////////////////////////////////////////////////////////////////////////////
// Function templates
////////////////////////////////////////////////////////////////////////////////

NAMESPACE_BEGIN(Renderer::Graphics::Vulkan)

template<typename Attributes>
auto
GetAvailableAttributes(
  std::vector<Attributes> const& attributes,
  std::vector<std::string> const& requestedAttributeNames)
  -> std::vector<std::string>;

////////////////////////////////////////////////////////////////////////////////
// Free function declarationss
////////////////////////////////////////////////////////////////////////////////

// clang-format off
auto
MatchAttributeName(
  VkExtensionProperties const& properties,
  std::string const& name)
  -> bool;

auto
MatchAttributeName(
  VkLayerProperties const& properties,
  std::string const& name)
  -> bool;
// clang-format on

NAMESPACE_END(Renderer::Graphics::Vulkan::Layers)

////////////////////////////////////////////////////////////////////////////////
// Inline implementations
////////////////////////////////////////////////////////////////////////////////

#include "Attributes.inl"

////////////////////////////////////////////////////////////////////////////////
