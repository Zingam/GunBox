#pragma once
////////////////////////////////////////////////////////////////////////////////
#include <Engine/Base>
////////////////////////////////////////////////////////////////////////////////

// C++ Standard Library
#include <map>
#include <sstream>

////////////////////////////////////////////////////////////////////////////////
// Class declarations
////////////////////////////////////////////////////////////////////////////////

NAMESPACE_BEGIN(Logger)

enum class LogLevel
{
  Error,
  Info,
  Warning
};

////////////////////////////////////////////////////////////////////////////////
// Static data
////////////////////////////////////////////////////////////////////////////////

extern "C++" std::map<LogLevel, std::string> logLevels;

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

auto
WriteLog(std::stringstream const& ss) -> void;

////////////////////////////////////////////////////////////////////////////////
// Function templates
////////////////////////////////////////////////////////////////////////////////

template<typename... Args>
auto
Log(LogLevel logLevel, Args const&... args) -> void
{
  std::stringstream ss;
  ((ss << "-- " << logLevels.at(logLevel) << ": ") << ... << args) << "\n";

  WriteLog(ss);
}

NAMESPACE_END(Logger)
