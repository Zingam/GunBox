#pragma once

////////////////////////////////////////////////////////////////////////////////
// Inline implementations
////////////////////////////////////////////////////////////////////////////////

NAMESPACE_BEGIN(System)

////////////////////////////////////////////////////////////////////////////////
// Properties
////////////////////////////////////////////////////////////////////////////////

System::EventProcessing::InputEventProcessor&
EventProcessor::InputEventProcessor()
{
  return inputEventProcessor;
}

System::EventProcessing::SystemEventProcessor&
EventProcessor::SystemEventProcessor()
{
  return systemEventProcessor;
}

////////////////////////////////////////////////////////////////////////////////
// Methods templates
////////////////////////////////////////////////////////////////////////////////

template<typename EventHandler, typename... Args>
inline void
EventProcessor::RegisterEventHandler(Args&&... args)
{
  eventHandlers.emplace_back(
    std::make_unique<EventHandler>(std::forward<Args>(args)...));
}

NAMESPACE_END(System)
